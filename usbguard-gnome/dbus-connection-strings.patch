From b1b7baab90c68441cec97a31d75f377401d9f553 Mon Sep 17 00:00:00 2001
From: Bernhard Schuster <bernhard@ahoi.io>
Date: Thu, 20 Feb 2020 16:53:26 +0100
Subject: [PATCH] fix: 0.7.5+ add connection type handling, adjust dbus strings

---
 src/device.py                | 10 +++++++---
 src/new_device_window.py     |  4 ++--
 src/usbguard_dbus.py         |  8 ++++----
 src/usbguard_gnome_window.py |  4 ++--
 4 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/src/device.py b/src/device.py
index 5e4872f..5cffa2f 100644
--- a/src/device.py
+++ b/src/device.py
@@ -35,7 +35,7 @@ class Device(object):
         0xFF: "Vendor-specific",
     }
 
-    def __init__(self, number, rule, id, serial, name, hash, parent_hash, via_port, with_interface):
+    def __init__(self, number, rule, id, serial, name, hash, parent_hash, via_port, with_interface, with_connect_type):
         """Init the class
 
         number: USBGuard device number
@@ -60,6 +60,7 @@ def __init__(self, number, rule, id, serial, name, hash, parent_hash, via_port,
         self.with_interface = with_interface
         if not isinstance(self.with_interface, list):
             self.with_interface = [self.with_interface]
+        self.with_connect_type = with_connect_type
 
     def has_interface(self, interface_class):
         """
@@ -129,6 +130,7 @@ def as_list(self):
             self.via_port,
             "\n".join(self.get_interfaces()),
             self.get_class_description_string(),
+            self.with_connect_type,
         ]
 
     # NOTICE: The number is explicitly not part of the comparison here. This
@@ -147,7 +149,8 @@ def __eq__(self, other):
                     self.hash == other.hash and
                     self.parent_hash == other.parent_hash and
                     self.via_port == other.via_port and
-                    self.with_interface == other.with_interface
+                    self.with_interface == other.with_interface and
+                    self.with_connect_type == other.with_connect_type
             ):
                 equal = True
         return equal
@@ -167,7 +170,8 @@ def __hash__(self):
             hash(self.hash) ^
             hash(self.parent_hash) ^
             hash(self.via_port) ^
-            hash(tuple(self.with_interface))
+            hash(tuple(self.with_interface)) ^
+            hash(self.with_connect_type)
         )
 
     @staticmethod
diff --git a/src/new_device_window.py b/src/new_device_window.py
index 71d74c0..0fa96cc 100644
--- a/src/new_device_window.py
+++ b/src/new_device_window.py
@@ -83,7 +83,7 @@ def __init__(self, app, device):
 class USBGuardNewDeviceWindowExpert(Gtk.ApplicationWindow):
 
     DEVICES_LIST_COLUMNS = [
-        _('number'), _('enabled?'), _('id'), _('serial'), _('name'), _('port'), _('interface'), _('description')
+        _('number'), _('enabled?'), _('id'), _('serial'), _('name'), _('port'), _('interface'), _('description'), _('type')
     ]
 
     def __init__(self, app, device):
@@ -96,7 +96,7 @@ def __init__(self, app, device):
         self.application = app
         self.device = device
 
-        devices_list_model = Gtk.ListStore(int, bool, str, str, str, str, str, str)
+        devices_list_model = Gtk.ListStore(int, bool, str, str, str, str, str, str, str)
         devices_list_model.append(device.as_list())
 
         view = Gtk.TreeView(model=devices_list_model)
diff --git a/src/usbguard_dbus.py b/src/usbguard_dbus.py
index 4995bb0..bdc7e4a 100644
--- a/src/usbguard_dbus.py
+++ b/src/usbguard_dbus.py
@@ -37,10 +37,10 @@ def __init__(self):
         DBusGMainLoop(set_as_default=True)
         self.bus = dbus.SystemBus()
 
-        devices_object = self.bus.get_object('org.usbguard', '/org/usbguard/Devices')
-        policy_object = self.bus.get_object('org.usbguard', '/org/usbguard/Policy')
-        self.policy_interface = dbus.Interface(policy_object, dbus_interface='org.usbguard.Policy')
-        self.devices_interface = dbus.Interface(devices_object, dbus_interface='org.usbguard.Devices')
+        devices_object = self.bus.get_object('org.usbguard1', '/org/usbguard1/Devices')
+        policy_object = self.bus.get_object('org.usbguard1', '/org/usbguard1/Policy')
+        self.policy_interface = dbus.Interface(policy_object, dbus_interface='org.usbguard.Policy1')
+        self.devices_interface = dbus.Interface(devices_object, dbus_interface='org.usbguard.Devices1')
 
         self.add_signal_receivers()
         self.device_presence_changed_callbacks = []
diff --git a/src/usbguard_gnome_window.py b/src/usbguard_gnome_window.py
index 72a5568..4383e70 100755
--- a/src/usbguard_gnome_window.py
+++ b/src/usbguard_gnome_window.py
@@ -46,7 +46,7 @@ class USBGuardGnomeWindow(Gtk.ApplicationWindow):
     """Window class to display the Application main window"""
 
     DEVICE_LIST_COLUMNS = [
-        _('number'), _('enabled?'), _('id'), _('serial'), _('name'), _('port'), _('interface'), _('description')
+        _('number'), _('enabled?'), _('id'), _('serial'), _('name'), _('port'), _('interface'), _('description'), _('type')
     ]
 
     def __init__(self, app, detailed=None):
@@ -61,7 +61,7 @@ def init_device_list(self, device_list):
 
         device_list: a list of Device objects - will be displayed in the grid
         """
-        self.device_list_model = Gtk.ListStore(int, bool, str, str, str, str, str, str)
+        self.device_list_model = Gtk.ListStore(int, bool, str, str, str, str, str, str, str)
         for device in device_list:
             print(device.as_list())
             self.device_list_model.append(device.as_list())
